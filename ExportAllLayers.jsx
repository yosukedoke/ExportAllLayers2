(function(){    var FormatType = {        JPEG: "JPEG",        PNG:"PNG"    };    var Config = {        baseURL : "",        baseDir : "",        limit : 200,        useFolder: false,        isSaveToFile: true,        formatTo: FormatType.PNG,        pngBit: 24,        jpegQuality: 100    };    var console = {        log: function (str) {            alert(str);        }    }    var Utility = (function() {        function _createFolder(url) {        }        function _toJSON( obj ) {            switch( typeof(obj) ) {                case "object":                    var result = [];                    for( var i in obj ) {                        result.push( i + " : "+ toJSON(obj[i]) );                    }                    return "{\n"+ result.join(",\n") + "\n}";                break;                default:                    return  '"' + String(obj) +'"';                break;            }        }        return {            toJSON: function ( obj ) {                return _toJSON(obj);            },            fileNameWithoutExtention: function (name) {                var nameParts = String(name).split(".");                return nameParts.splice(0, nameParts.length-1).join(".");            },            validName: function (name){                name = name.replace(/\/$/,"");                return name.replace(/[\/\:\;\.\,\@\"\'\\]/g,"_");            },            createFolder: function (path) {                var folder = new Folder(path);                if( folder.exists ) {                    return false;                }                else {                    folder.create();                    return true;                }            },            fileName : function ( path, name, ext, doubleCheck ) {                if( Config.useFolder ) {                    path = Config.baseURL + path;                }                else {                    name = Utility.validName(path+name);                    path = Config.baseURL + Config.baseDir;                }                var filename = [ path, name ].join("/");                var count = 0;                var newFileName = "";                newFileName = filename + "." + ext                                if( !doubleCheck ) return newFileName;                                var file = new File(newFileName);                while(file.exists != false){                    count +=1;                    newFileName = filename + count + "." + ext                    file = new File(newFileName);                }                return newFileName;            }        };    })();    var Report = function () {        var self = this,            records = [];        self.add =  function(msg) {            records.push(msg);        };        self.output =  function() {            console.log(records.join("¥n"));        };        return self;    };    var Structure = function () {        var self = this,            items = [];                self.addItem = function (fname, x, y) {            items.push({                filename : escape(fname),                position  : [ Math.max(x,0), Math.max(y,0) ]            });        };        self.output = function () {            var json = self.toJSON();            if(!json) {                alert("non result");                return;            }                    var outputFile = new File(Config.baseURL+ Config.baseDir + "buildup.jsfl");                        var filePath = Config.baseURL+ Config.baseDir;                        if(File.fs == "Windows" ) {                filePath.replace(/([A-Za-z]+)\:(.*)/,"file:///" +RegExp.$1+"|"+RegExp.$2 );                filePath = "file:///" +RegExp.$1+"|"+RegExp.$2;            }            else {                //dir.replace(/([A-Za-z]+)\:(.*)/,"file:///" +RegExp.$1+"|"+RegExp.$2 );                filePath = "file://Macintosh HD" + filePath;            }            outputFile.open("w");            outputFile.encoding = "utf-8";            outputFile.write([ß '(function(){',                'var structure = '+json+';',                'var dir = "'+escape(Config.baseDir)+'";',                'var baseURL = unescape("' +escape(filePath)+ '");',                'var dom       = fl.getDocumentDOM();',                'if( !dom ) {',                '	dom        = fl.createDocument();',                 '	if( !dom ) return;',                '}',                'for( var i in structure ) {',                '	var obj = structure[i];',                '	var fileUrl = baseURL + unescape(obj.filename);',                '	var x = parseInt( obj.position[0] );',                '	var y = parseInt( obj.position[1] );',                '	if( !FLfile.exists( fileUrl ) ) continue;',                '	dom.importFile( fileUrl, false );',                '	var item = dom.selection[0];',                '	item.x = x;',                '	item.y = y;',                '	dom.selectNone();',                '}',                '})()'            ].join("\n") );            outputFile.close();        };        self.toJSON = function () {            return Utilty.toJSON(items);        };        return self;    };    var FileMaker = {        toPNG: function (path, name, bit) {            var exp = new ExportOptionsSaveForWeb();            exp.format = SaveDocumentType.PNG;            exp.interlaced　= false;            if(bit == 8) {                exp.PNG8 = true;            }            else {                exp.PNG8 = false;            }            fileObj = new File( Utility.fileName( path, name, "png") );            activeDocument.exportDocument(fileObj, ExportType.SAVEFORWEB, exp);                        return fileObj.name;        },        toJPEG: function (path, name, quality){            var exp = new ExportOptionsSaveForWeb();            exp.format = SaveDocumentType.JPEG;            exp.interlaced　= false;            exp.optimized= false;            exp.quality = quality;                        fileObj = new File(Utility.fileName(path, name, "jpg"));            activeDocument.exportDocument(fileObj, ExportType.SAVEFORWEB, exp);                        return fileObj.name;        }    };    var Layers = function (target) {        var self = this,            currentFolder = "",            count = 0,            offsetMargin = 0;        function setVisible(obj, bool){            var i=0, l;            switch( obj.typename ) {                //case "LayerSets":                case "Layers":                    for( l=obj.length; i<l; ++i ) {                        setVisible(obj[i],bool);                    }                break;                case "LayerSet":                    obj.visible = bool;                    for( l=obj.layers.length; i<l; ++i ) {                        setVisible(obj.layers[i], bool);                    }                break;                default:                    obj.visible = bool;                    if( bool ) {                        displayParent( obj );                    }                break;            }        }        function displayParent(obj){            if(!obj.parent) return;                        obj.parent.visible = true;            displayParent( obj.parent );        }        function outputLayers(layers, folder, structure){            if(!!folder) {                currentFolder += Utility.validName(folder)+"/";                if(Config.useFolder) {                    Utility.createFolder(Config.baseURL + currentFolder);                }            }            for( var i=0, l=layers.length; i<l; ++i ) {                var layer = layers[i];                if( layer.typename == "LayerSet" ){                    var tmp = currentFolder;                    outputLayers(layer.layers, layer.name, structure);                    currentFolder = tmp;                }                else {                    if( count++> Config.limit ) return;                    clippingLayer(layer, structure);                }            }        }        function clippingLayer(obj, structure){            //書き出し準備            //setVisible(document.layers, false);            setVisible(obj, true);            //レイヤーの画像範囲を取得            var boundsObj = obj.bounds;            x1 = parseInt(boundsObj[0]) - offsetMargin;            y1 = parseInt(boundsObj[1]) - offsetMargin;            x2 = parseInt(boundsObj[2]) + offsetMargin;            y2 = parseInt(boundsObj[3]) + offsetMargin;            　//指定範囲を選択            selectReg = [[x1,y1],[x2,y1],[x2,y2],[x1,y2]];            activeDocument.selection.select(selectReg);            try {                //選択範囲を結合してコピー                activeDocument.selection.copy(true);                //選択を解除                activeDocument.selection.deselect();                //新規ドキュメントを作成                var resolution = 72;                var mode = NewDocumentMode.RGB;                var initialFill = DocumentFill.TRANSPARENT;                                var name = Utility.validName(obj.name);                var width   = x2 - x1;                var height = y2 - y1;                preferences.rulerUnits = Units.PIXELS;                newDocument = documents.add(width, height, resolution, name, mode, initialFill);                //画像をペースト                newDocument.paste();                //新規レイヤーの画像範囲を取得                var newBoundsObj = newDocument.activeLayer.bounds;                nx1 = parseInt(newBoundsObj[0]) - offsetMargin;                ny1 = parseInt(newBoundsObj[1]) - offsetMargin;                nx2 = parseInt(newBoundsObj[2]) + offsetMargin;                ny2 = parseInt(newBoundsObj[3]) + offsetMargin;                //空白がある場合は切り抜き                if((nx2 - nx1) != (x2 - x1) || (ny2 - ny1) != (y2 - y1)){                    newDocument.crop(newBoundsObj);                }                //ファイルに書き出し                if(Config.isSaveToFile == true){                    switch(Config.formatTo){                        case FormatType.PNG:                             var fname = FileMaker.toPNG( currentFolder, name, Config.pngBit );                        break;                        case FormatType.JPEG:                            var fname = FileMaker.toJPEG( currentFolder, name, Config.jpegQuality );                        break;                    }                                        structure.addItem(fname, x1, y1);                }                newDocument.close( SaveOptions.DONOTSAVECHANGES );            }            catch(e){                //選択範囲に何も含まれていない場合                report.add( obj.name+": "+e.message);            }            finally{                //元のドキュメントをアクティブに設定                activeDocument = document;                setVisible(obj, false);            }        }        self.visible = function (visibility) {            setVisible(target, visibility);        };        self.output = function (structure) {            currentFolder = "";                        this.visible(false);            outputLayers(target, null, structure);            this.visible(true);        };        return self;    };        if(!activeDocument) return;     (function (document) {        var backupRulerUnits = preferences.rulerUnits;        preferences.rulerUnits = Units.PIXELS;	// 単位をピクセルに        Config.baseURL = String(File(document.path).fsName).replace(/\\/g, "/" )+"/";        var report = new Report();        var layers = new Layers(document.layers);        var structure = new Structure();        if( !Config.useFolder ) {            Config.baseDir = Utility.fileNameWithoutExtention(document.name) + "/";            Utility.createFolder(Config.baseURL + Config.baseDir);        }                layers.output(structure);        structure.output();        report.add("complete!");        report.output();                preferences.rulerUnits = backupRulerUnits;    })(activeDocument);})();