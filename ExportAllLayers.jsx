(function(){    var FormatType = {        NONE: 0,        JPEG: 1,        PNG:2    };    var Config = {        baseURL : "",        baseDir : "",        limit : 200,        useLayerFolder: false,        formatTo: FormatType.PNG,        pngBit: 24,        jpegQuality: 100,        isRetina: confirm("Retina対応しますか？(@2xをつける)")    };    var console = {        log: function (str) {            alert(str);        }    }    var Utility = (function() {        return {            toJSON: function (obj) {                function _toJSON(obj) {                    switch( typeof(obj) ) {                        case "object":                            var result = [];                            for( var i in obj ) {                                result.push( i + " : "+ _toJSON(obj[i]) );                            }                            return "{\n"+ result.join(",\n") + "\n}";                        break;                        default:                            return  '"' + String(obj) +'"';                        break;                    }                }                return _toJSON(obj);            },            fileNameWithoutExtention: function (name) {                var nameParts = String(name).split(".");                return nameParts.splice(0, nameParts.length-1).join(".");            },            escapeFilename: function (name){                // 記号、空白、2バイト文字をエスケープ                name = name.replace(/\//g,"");                return encodeURIComponent(name);            },            createFolder: function (path) {                var folder = new Folder(path);                if( folder.exists ) {                    return false;                }                else {                    folder.create();                    return true;                }            },            file : function (filepath, name, override) {                var count = 0;                var file = new File(filepath + name);                                if(!file.exists || !(new Folder(filepath)).exists || override) {                    return  file;                }                                var extention = name.split(".")[1];                name =  name.replace("."+extention, "");                                while(file.exists !== false){                    count ++;                    file = new File(filepath + name + count + "." + extention);                }                            return file;            }        };    })();    var Report = function () {        var self = this,            records = [];        self.add =  function(msg) {            records.push(msg);        };        self.output =  function() {            console.log(records.join("¥n"));        };        return self;    };    var Structure = function () {        var self = this,            items = [];                self.addItem = function (fname, x, y) {            items.push({                filename : escape(fname),                position  : [ Math.max(x,0), Math.max(y,0) ]            });        };        self.output = function () {            var json = self.toJSON();            if(!json) {                alert("non result");                return;            }                    var outputFile = new File(Config.baseURL+ Config.baseDir + "buildup.jsfl");                        var filePath = Config.baseURL+ Config.baseDir;                        if(File.fs == "Windows" ) {                filePath.replace(/([A-Za-z]+)\:(.*)/,"file:///" +RegExp.$1+"|"+RegExp.$2 );                filePath = "file:///" +RegExp.$1+"|"+RegExp.$2;            }            else {                //dir.replace(/([A-Za-z]+)\:(.*)/,"file:///" +RegExp.$1+"|"+RegExp.$2 );                filePath = "file://Macintosh HD" + filePath;            }            outputFile.open("w");            outputFile.encoding = "utf-8";            outputFile.write(['(function(){',                'var structure = '+json+';',                'var dir = "'+escape(Config.baseDir)+'";',                'var baseURL = unescape("' +escape(filePath)+ '");',                'var dom       = fl.getDocumentDOM();',                'if( !dom ) {',                '	dom        = fl.createDocument();',                 '	if( !dom ) return;',                '}',                'for( var i in structure ) {',                '	var obj = structure[i];',                '	var fileUrl = baseURL + unescape(obj.filename);',                '	var x = parseInt( obj.position[0] );',                '	var y = parseInt( obj.position[1] );',                '	if( !FLfile.exists( fileUrl ) ) continue;',                '	dom.importFile( fileUrl, false );',                '	var item = dom.selection[0];',                '	item.x = x;',                '	item.y = y;',                '	dom.selectNone();',                '}',                '})()'            ].join("\n") );            outputFile.close();        };        self.toJSON = function () {            return Utilty.toJSON(items);        };        return self;    };    var FileMaker = {        toPNG: function (file, bit) {            var expOptions = new ExportOptionsSaveForWeb();            expOptions.format = SaveDocumentType.PNG;            expOptions.interlaced = false;            expOptions.PNG8 = bit === 8;            activeDocument.exportDocument(file, ExportType.SAVEFORWEB, expOptions);        },        toJPEG: function (file, quality){            var expOptions = new ExportOptionsSaveForWeb();            expOptions.format = SaveDocumentType.JPEG;            expOptions.interlaced = false;            expOptions.optimized= false;            expOptions.quality = quality;                        activeDocument.exportDocument(file, ExportType.SAVEFORWEB, expOptions);        }    };    var Layers = function (target) {        var self = this,            count = 0,            offsetMargin = 0;        function setVisible(obj, bool){            var i=0, l;            switch( obj.typename ) {                case "Layers":                    for( l=obj.length; i<l; ++i ) {                        setVisible(obj[i],bool);                    }                break;                case "LayerSet":                    obj.visible = bool;                    for( l=obj.layers.length; i<l; ++i ) {                        setVisible(obj.layers[i], bool);                    }                break;                default:                    obj.visible = bool;                    if( bool ) {                        displayParent( obj );                    }                break;            }        }        function displayParent(obj){            if(!obj.parent) return;                        obj.parent.visible = true;            displayParent( obj.parent );        }        function outputLayers(layers, namebuffer, structure) {            for( var i=0, l=layers.length; i<l; ++i ) {                var layer = layers[i];                if( layer.typename === "LayerSet" ){                    namebuffer.push(Utility.escapeFilename(layer.name));                    outputLayers(layer.layers, namebuffer .slice(), structure);                    namebuffer.pop();                }                else {                    if( count++> Config.limit ) return;                    clippingLayer(layer, namebuffer.slice(), structure);                }            }        }        function clippingLayer(layer, nameBuffer, structure){            //書き出し準備            setVisible(layer, true);            //レイヤーの画像範囲を取得            var boundsObj = layer.bounds;            x1 = parseInt(boundsObj[0]) - offsetMargin;            y1 = parseInt(boundsObj[1]) - offsetMargin;            x2 = parseInt(boundsObj[2]) + offsetMargin;            y2 = parseInt(boundsObj[3]) + offsetMargin;             //指定範囲を選択            selectReg = [[x1,y1],[x2,y1],[x2,y2],[x1,y2]];            activeDocument.selection.select(selectReg);            preferences.rulerUnits = Units.PIXELS;            var resolution = 72;            var mode = NewDocumentMode.RGB;            var initialFill = DocumentFill.TRANSPARENT;                        var document = activeDocument;                        try {                //選択範囲を結合してコピー                activeDocument.selection.copy(true);                //選択を解除                activeDocument.selection.deselect();                //新規ドキュメントを作成                var width   = x2 - x1;                var height = y2 - y1;                var name = nameBuffer.join("_") + "_" + Utility.escapeFilename(layer.name);                name = name.replace(/^\_/, "");                               var newDocument = documents.add(width, height, resolution, name, mode, initialFill);                //画像をペースト                newDocument.paste();                //新規レイヤーの画像範囲を取得                var newBoundsObj = newDocument.activeLayer.bounds;                nx1 = parseInt(newBoundsObj[0]) - offsetMargin;                ny1 = parseInt(newBoundsObj[1]) - offsetMargin;                nx2 = parseInt(newBoundsObj[2]) + offsetMargin;                ny2 = parseInt(newBoundsObj[3]) + offsetMargin;                //空白がある場合は切り抜き                if((nx2 - nx1) !== (x2 - x1) || (ny2 - ny1) !== (y2 - y1)){                    newDocument.crop(newBoundsObj);                }                            //ファイルに書き出し                var file, safix = Config.isRetina ? "@2x" : "";                switch(Config.formatTo){                    case FormatType.PNG:                         file = Utility.file(Config.baseURL + Config.baseDir, name + safix + ".png");                         FileMaker.toPNG(file, Config.pngBit );                    break;                    case FormatType.JPEG:                         file = Utility.file(Config.baseURL + Config.baseDirr, name + safix + ".jpg");                         FileMaker.toJPEG(file, Config.jpegQuality );                    break;                    case FormatType.NONE:                        // do nothing                    break;                }                                if (file) {                    structure.addItem(file.name, x1, y1);                }                newDocument.close(SaveOptions.DONOTSAVECHANGES);            }            catch(err){                //選択範囲に何も含まれていない場合                console.log( layer.name+": "+err.message);            }            finally{                //元のドキュメントをアクティブに設定                activeDocument = document;                setVisible(layer, false);            }        }        self.visible = function (visibility) {            setVisible(target, visibility);        };        self.output = function (structure) {            this.visible(false);            outputLayers(target, [], structure);            this.visible(true);        };        return self;    };    if(!activeDocument) return;     (function (document) {        var backupRulerUnits = preferences.rulerUnits;        preferences.rulerUnits = Units.PIXELS;	// 単位をピクセルに        var report = new Report();        var layers = new Layers(document.layers);        var structure = new Structure();        try {            Config.baseURL = String(File(document.path).fsName).replace(/\\/g, "/" )+"/";            Config.baseDir = Utility.fileNameWithoutExtention(document.name) + "/";                        layers.output(structure);            //structure.output();            report.add("complete!");            report.output();        }        catch(err) {            if(!confirm("ERROR:中断しますか？("+err.message+")")) {                throw err;            }        }        finally {            preferences.rulerUnits = backupRulerUnits;        }        })(activeDocument);})();